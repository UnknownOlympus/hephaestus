// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	olympus "github.com/UnknownOlympus/olympus-protos/gen/go/scraper/olympus"
)

// ScraperServiceClient is an autogenerated mock type for the ScraperServiceClient type
type ScraperServiceClient struct {
	mock.Mock
}

// GetDailyTasks provides a mock function with given fields: ctx, in, opts
func (_m *ScraperServiceClient) GetDailyTasks(ctx context.Context, in *olympus.GetDailyTasksRequest, opts ...grpc.CallOption) (*olympus.GetDailyTasksResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDailyTasks")
	}

	var r0 *olympus.GetDailyTasksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *olympus.GetDailyTasksRequest, ...grpc.CallOption) (*olympus.GetDailyTasksResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *olympus.GetDailyTasksRequest, ...grpc.CallOption) *olympus.GetDailyTasksResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*olympus.GetDailyTasksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *olympus.GetDailyTasksRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployees provides a mock function with given fields: ctx, in, opts
func (_m *ScraperServiceClient) GetEmployees(ctx context.Context, in *olympus.GetEmployeesRequest, opts ...grpc.CallOption) (*olympus.GetEmployeesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployees")
	}

	var r0 *olympus.GetEmployeesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *olympus.GetEmployeesRequest, ...grpc.CallOption) (*olympus.GetEmployeesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *olympus.GetEmployeesRequest, ...grpc.CallOption) *olympus.GetEmployeesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*olympus.GetEmployeesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *olympus.GetEmployeesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskTypes provides a mock function with given fields: ctx, in, opts
func (_m *ScraperServiceClient) GetTaskTypes(ctx context.Context, in *olympus.GetTaskTypesRequest, opts ...grpc.CallOption) (*olympus.GetTaskTypesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskTypes")
	}

	var r0 *olympus.GetTaskTypesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *olympus.GetTaskTypesRequest, ...grpc.CallOption) (*olympus.GetTaskTypesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *olympus.GetTaskTypesRequest, ...grpc.CallOption) *olympus.GetTaskTypesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*olympus.GetTaskTypesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *olympus.GetTaskTypesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewScraperServiceClient creates a new instance of ScraperServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScraperServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScraperServiceClient {
	mock := &ScraperServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
