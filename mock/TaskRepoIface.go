// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/UnknownOlympus/hephaestus/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// TaskRepoIface is an autogenerated mock type for the TaskRepoIface type
type TaskRepoIface struct {
	mock.Mock
}

// GetOrCreateTaskTypeID provides a mock function with given fields: ctx, typeName
func (_m *TaskRepoIface) GetOrCreateTaskTypeID(ctx context.Context, typeName string) (int, error) {
	ret := _m.Called(ctx, typeName)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateTaskTypeID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, typeName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, typeName)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, typeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveTaskData provides a mock function with given fields: ctx, task
func (_m *TaskRepoIface) SaveTaskData(ctx context.Context, task models.Task) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for SaveTaskData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTaskExecutors provides a mock function with given fields: ctx, taskID, executors
func (_m *TaskRepoIface) UpdateTaskExecutors(ctx context.Context, taskID int, executors []string) error {
	ret := _m.Called(ctx, taskID, executors)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskExecutors")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []string) error); ok {
		r0 = rf(ctx, taskID, executors)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertTask provides a mock function with given fields: ctx, task, typeID
func (_m *TaskRepoIface) UpsertTask(ctx context.Context, task models.Task, typeID int) error {
	ret := _m.Called(ctx, task, typeID)

	if len(ret) == 0 {
		panic("no return value specified for UpsertTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Task, int) error); ok {
		r0 = rf(ctx, task, typeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskRepoIface creates a new instance of TaskRepoIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepoIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepoIface {
	mock := &TaskRepoIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
